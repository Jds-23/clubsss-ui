import Head from "next/head";
import { useRouter } from "next/router";
import React, { useCallback, useState } from "react";
import { PostIdeaModal } from "../../components/PostIdeaModal";
import Button from "../../components/Button";
import IdeaCard from "../../components/IdeaCard";
import { useAppData } from "../../hooks/useAppData";
import useSortableData from "../../hooks/useSortableData";
import useApp from "../../state/app/hooks";
import useNft from "../../state/app/useNft";
import useWallet from "../../state/wallet/hooks/useWallet";
import { getDate } from "../../utils";
import { JUST_NFT_ADDRESS } from "../../constants";

const Community = () => {
  const router = useRouter();
  const { id } = router.query;
  const { communities, nftAddress, clubName, fetchCommunties } = useAppData(
    typeof id === "string" ? id : undefined
  );

  const [idea, setIdea] = useState("");
  const { account } = useWallet();
  const { mint, minting, balance } = useNft(nftAddress);
  const { mintIdea, mintingIdea } = useApp(
    typeof id === "string" ? id : undefined
  );
  const [postIdeaModal, setPostIdeaModal] = useState(false);
  const [postedIdeaModal, setPostedIdeaModal] = useState(false);
  const { requestSort, items, sortConfig } = useSortableData(communities);
  console.log(nftAddress);
  const mintTheIdea = useCallback(
    async (idea: string, metadata: string, deadline: string) => {
      await mintIdea(idea, metadata, deadline);
      fetchCommunties();
    },
    [mintIdea, fetchCommunties]
  );

  return (
    <div>
      <Head>
        <title>clubsss</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PostIdeaModal
        open={postIdeaModal}
        setOpen={setPostIdeaModal}
        idea={idea}
        setIdea={setIdea}
        title={"Post A Idea"}
        mintIdea={mintTheIdea}
        mintingIdea={mintingIdea}
      />
      <main className="w-full px-4 mx-auto max-w-3xl flex flex-col items-center font-semibold">
        <h1 className="mt-12 text-2xl sm:text-4xl text-center sm:mt-20">
          Welcome, to {clubName} club
        </h1>
        <p className="text-center text-lg mt-4 sm:mt-7">
          {clubName} club members can create ideas and vote or unvote them.
        </p>
        {account ? (
          <>
            {nftAddress === JUST_NFT_ADDRESS ? (
              <>
                <p className="text-center text-sm mt-3 sm:mt-6">
                  Since, this is a testnet get your test NFT here.
                </p>
                <p className="text-center text-sm">
                  Your NFT Balance will determine weight of your vote (NFT
                  balance: {balance && balance.toString()})
                </p>
                <Button
                  onClick={mint}
                  loading={minting}
                  className="text-sm mt-1 sm:mt-3 w-full max-w-[124px]"
                >
                  {minting ? "Minting ðŸŒŸ" : "Mint ðŸŒŸ"}
                </Button>
              </>
            ) : (
              <>
                <p className="text-center text-sm">
                  Your NFT Balance will determine weight of your vote (NFT
                  balance: {balance && balance.toString()})
                </p>
              </>
            )}
          </>
        ) : (
          <>
            <p className="text-center text-sm mt-3 sm:mt-6">
              Please Connect your wallet.
            </p>
          </>
        )}

        <div className="mt-9 font-bold sm:mt-6 w-full">
          <div className="w-full flex items-center justify-between">
            <p className="text-base sm:text-xl">Ideas</p>
            {/* <div className="flex text-xs sm:text-sm">
              <button
                onClick={() => requestSort("score")}
                className="font-bold mr-3"
              >
                _sort(by score)
              </button>
              <button
                onClick={() => requestSort("timestamp")}
                className="font-bold"
              >
                _sort(by time)
              </button>
            </div> */}
          </div>
          {balance && !balance.isZero() && (
            <div className="w-full p-2 mt-1 border border-strokes rounded-lg sm:mt-3 flex items-center">
              <input
                value={idea}
                onChange={(e) => setIdea(e.target.value)}
                placeholder="Mint a idea"
                className="bg-transparent w-full border-none text-base placeholder:text-gray-300 font-semibold"
              />
              <Button
                loading={mintingIdea}
                onClick={() => {
                  if (idea.length > 0) {
                    setPostIdeaModal(true);
                  }
                }}
                className="text-sm w-full ml-2 max-w-[132px]"
              >
                {mintingIdea ? "Minting Idea ðŸ’¡" : "Mint Idea ðŸ’¡"}
              </Button>
            </div>
          )}
          <div className="w-full mt-3">
            {items.map((idea) => {
              return (
                <IdeaCard
                  community={typeof id === "string" ? id : undefined}
                  ideator={idea?.from ?? ""}
                  dateCreated={
                    idea?.timestamp
                      ? getDate(new Date(idea.timestamp * 1000))
                      : ""
                  }
                  downVotes={idea.downScore}
                  upVotes={idea.upScore}
                  idea={idea?.ideaStr ?? ""}
                  index={idea.id}
                  votesCount={idea.votesCount}
                  key={idea.id}
                />
              );
            })}
          </div>
        </div>
      </main>
    </div>
  );
};

export default Community;
